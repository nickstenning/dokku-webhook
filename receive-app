#!/usr/bin/env bash
set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x
source "$PLUGIN_CORE_AVAILABLE_PATH/common/functions"
source "$PLUGIN_AVAILABLE_PATH/git/functions"

# In order to get access to the git revision being pushed, we have to intercept
# it in the only pluginhook which has access to it, receive-app. This is ugly,
# and there may be a better way in the future.

APP=$1; REV=$2

# Current git rev is either master or 0{40} if this is the first push. Again,
# ideally we'd get this direct from the prereceive hook, but it's not passed
# through by dokku at the moment.
OLDREV=$(cat $DOKKU_ROOT/$APP/refs/heads/master 2>/dev/null ||
         echo 0000000000000000000000000000000000000000)

# If we're called as a result of a ps:rebuild or similar, then REV will be
# empty, in which case we should set it to the OLDREV.
if [[ -z "$REV" ]]; then
  NEWREV=$OLDREV
else
  NEWREV=$REV
fi

"$(dirname $0)"/trigger receive-app $APP \
    git_rev=$NEWREV \
    git_rev_before=$OLDREV

# And then continue the build as normal
git_receive_app() {
  declare desc="git receive-app plugin trigger"
  local trigger="git_receive_app"
  local APP="$1"; local REV="$2"

  # Don't trigger git build if there is no git repository.
  if [[ ! -d "$DOKKU_ROOT/$APP/refs" ]]; then
    true
  else
    acquire_app_deploy_lock "$APP" "exclusive"
    # shellcheck disable=SC2086
    git_build $APP $REV
    release_app_deploy_lock "$APP"
  fi
}

git_receive_app "$@"
